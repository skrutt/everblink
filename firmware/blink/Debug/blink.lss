
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001aa  0000023e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800068  00800068  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000276  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000247  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000157  00000000  00000000  00000505  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019d  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  000007fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d9  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a9  00000000  00000000  00000ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	33 c0       	rjmp	.+102    	; 0x6c <__vector_2>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	79 c0       	rjmp	.+242    	; 0x10c <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea ea       	ldi	r30, 0xAA	; 170
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a8 36       	cpi	r26, 0x68	; 104
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a8 e6       	ldi	r26, 0x68	; 104
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 36       	cpi	r26, 0x6B	; 107
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	94 d0       	rcall	.+296    	; 0x17a <main>
  52:	a9 c0       	rjmp	.+338    	; 0x1a6 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <enable_WDT>:

//Set up wdt for blink period
void enable_WDT()
{
	//Reset counter for wd
	WD_counter = 0;
  56:	10 92 69 00 	sts	0x0069, r1
  5a:	10 92 68 00 	sts	0x0068, r1
	//Setup and start wd
	
	WDTCR |= /*(1 << WDP1) |*/ (1 << WDP2) | (1 << WDP0);	//Set to 1/2 sec timeout
  5e:	81 b5       	in	r24, 0x21	; 33
  60:	85 60       	ori	r24, 0x05	; 5
  62:	81 bd       	out	0x21, r24	; 33
	WDTCR |= (1 << WDIE) | (1 << WDE);	//start wd
  64:	81 b5       	in	r24, 0x21	; 33
  66:	88 64       	ori	r24, 0x48	; 72
  68:	81 bd       	out	0x21, r24	; 33
  6a:	08 95       	ret

0000006c <__vector_2>:
		WDTCR |= 1 << WDIE;		//Set interrupt enable again
	}
}

ISR(SIG_PIN_CHANGE)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
	//blink();	
	enable_WDT();	//Start period of wdt interrupts
  8e:	e3 df       	rcall	.-58     	; 0x56 <enable_WDT>
}
  90:	ff 91       	pop	r31
  92:	ef 91       	pop	r30
  94:	bf 91       	pop	r27
  96:	af 91       	pop	r26
  98:	9f 91       	pop	r25
  9a:	8f 91       	pop	r24
  9c:	7f 91       	pop	r23
  9e:	6f 91       	pop	r22
  a0:	5f 91       	pop	r21
  a2:	4f 91       	pop	r20
  a4:	3f 91       	pop	r19
  a6:	2f 91       	pop	r18
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <disable_WDT>:
	
	
}
void disable_WDT()
{
	MCUSR &= !(1 << WDRF);
  b2:	84 b7       	in	r24, 0x34	; 52
  b4:	14 be       	out	0x34, r1	; 52
	//wdt_disable();
	WDTCR |= (1 << WDCE) | (1 << WDE);	//Prepare for stop
  b6:	81 b5       	in	r24, 0x21	; 33
  b8:	88 61       	ori	r24, 0x18	; 24
  ba:	81 bd       	out	0x21, r24	; 33
	WDTCR &= !((1 << WDIE) | (1 << WDE));	//stop
  bc:	81 b5       	in	r24, 0x21	; 33
  be:	11 bc       	out	0x21, r1	; 33
  c0:	08 95       	ret

000000c2 <blink>:

//Blink leds, set registers and so on
void blink()
{
	
	if(blink_counter >= no_blink_states)
  c2:	80 91 6a 00 	lds	r24, 0x006A
  c6:	87 30       	cpi	r24, 0x07	; 7
  c8:	10 f0       	brcs	.+4      	; 0xce <blink+0xc>
	{
		blink_counter = 0;
  ca:	10 92 6a 00 	sts	0x006A, r1
	}
	uint8_t curr_blink_state = blink_states[blink_counter];
  ce:	e0 91 6a 00 	lds	r30, 0x006A
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
	//curr_blink_state = 1 << red;
	
	DDRB |= curr_blink_state;	//Enable output
  da:	97 b3       	in	r25, 0x17	; 23
  dc:	98 2b       	or	r25, r24
  de:	97 bb       	out	0x17, r25	; 23
	PORTB |= curr_blink_state;	//power on
  e0:	98 b3       	in	r25, 0x18	; 24
  e2:	98 2b       	or	r25, r24
  e4:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	e1 ee       	ldi	r30, 0xE1	; 225
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <blink+0x28>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <blink+0x2e>
  f0:	00 00       	nop
	_delay_ms(5);
	
	PORTB &= !(curr_blink_state);	//power off
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	81 11       	cpse	r24, r1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	92 23       	and	r25, r18
  fc:	98 bb       	out	0x18, r25	; 24
	DDRB = 0;	//Disable
  fe:	17 ba       	out	0x17, r1	; 23
	blink_counter++;
 100:	80 91 6a 00 	lds	r24, 0x006A
 104:	8f 5f       	subi	r24, 0xFF	; 255
 106:	80 93 6a 00 	sts	0x006A, r24
 10a:	08 95       	ret

0000010c <__vector_12>:



//Isr for wdt timeout, enable timer
ISR(SIG_WATCHDOG_TIMEOUT)	
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	blink();
 12e:	c9 df       	rcall	.-110    	; 0xc2 <blink>
	WD_counter++;
 130:	80 91 68 00 	lds	r24, 0x0068
 134:	90 91 69 00 	lds	r25, 0x0069
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 69 00 	sts	0x0069, r25
 13e:	80 93 68 00 	sts	0x0068, r24
	
	
	if(WD_counter > WD_periods)	//Disable WD
 142:	80 91 68 00 	lds	r24, 0x0068
 146:	90 91 69 00 	lds	r25, 0x0069
 14a:	cd 97       	sbiw	r24, 0x3d	; 61
 14c:	14 f0       	brlt	.+4      	; 0x152 <__vector_12+0x46>
	{
		disable_WDT();
 14e:	b1 df       	rcall	.-158    	; 0xb2 <disable_WDT>
 150:	03 c0       	rjmp	.+6      	; 0x158 <__vector_12+0x4c>
		
	}else{
		WDTCR |= 1 << WDIE;		//Set interrupt enable again
 152:	81 b5       	in	r24, 0x21	; 33
 154:	80 64       	ori	r24, 0x40	; 64
 156:	81 bd       	out	0x21, r24	; 33
	}
}
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	bf 91       	pop	r27
 15e:	af 91       	pop	r26
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	7f 91       	pop	r23
 166:	6f 91       	pop	r22
 168:	5f 91       	pop	r21
 16a:	4f 91       	pop	r20
 16c:	3f 91       	pop	r19
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <main>:

int main(void)
{
	
	// setup
	ADCSRA = 0;	//Disable adc
 17a:	16 b8       	out	0x06, r1	; 6
	PRR = 0xf;	//Enable all power reduction modes
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	80 bd       	out	0x20, r24	; 32
	
	
	PCMSK |= 1 << PCINT3;	//Enable interrupt on pin 2, pcint 3
 180:	ab 9a       	sbi	0x15, 3	; 21
	GIMSK |= 1 << PCIE;		//Enable pin change interrupt
 182:	8b b7       	in	r24, 0x3b	; 59
 184:	80 62       	ori	r24, 0x20	; 32
 186:	8b bf       	out	0x3b, r24	; 59
	//Blink once for startup
	disable_WDT();
 188:	94 df       	rcall	.-216    	; 0xb2 <disable_WDT>
	blink();
 18a:	9b df       	rcall	.-202    	; 0xc2 <blink>
	sei();
 18c:	78 94       	sei
	
    while(1)
    {
        //TODO:: Please write your application code 
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 18e:	85 b7       	in	r24, 0x35	; 53
 190:	87 7e       	andi	r24, 0xE7	; 231
 192:	80 61       	ori	r24, 0x10	; 16
 194:	85 bf       	out	0x35, r24	; 53
		sleep_mode();
 196:	85 b7       	in	r24, 0x35	; 53
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	85 bf       	out	0x35, r24	; 53
 19c:	88 95       	sleep
 19e:	85 b7       	in	r24, 0x35	; 53
 1a0:	8f 7d       	andi	r24, 0xDF	; 223
 1a2:	85 bf       	out	0x35, r24	; 53
 1a4:	f4 cf       	rjmp	.-24     	; 0x18e <main+0x14>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
